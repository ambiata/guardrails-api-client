openapi: "3.0.0"
info:
  title: GuardRails Reporting API
  version: "0.0.0"
  description: GuardRails Reporting API
paths:
  /health-check:
    get:
      tags:
        - Service Health
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: Returns the status of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /guards/metrics:
    get:
      operationId: getGuardMetrics
      summary: Returns an array of GuardMetrics for a given time range.  If startTime or endTime are ommitted, a five minute duration is used by default.  Default page size is 10.
      parameters:
        - $ref: "#/components/parameters/StartTime"
        - $ref: "#/components/parameters/EndTime"
        - $ref: "#/components/parameters/PageNumber"
      tags:
        - Metrics
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: Returns metrics for Guards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GuardMetrics"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /guards/{guardName}/runs/{requestId}/metrics:
    get:
      operationId: getGuardRunMetrics
      summary: Returns an instance of GuardRunMetrics for a given time range.  If startTime or endTime are ommitted, a five minute duration is used by default.  Default page size is 10.
      parameters:
        - $ref: "#/components/parameters/GuardName"
        - $ref: "#/components/parameters/RequestId"
      tags:
        - Metrics
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: Returns metrics for Guards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GuardRunMetrics"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: authorization
      description: JWT token
  schemas:
    HttpError:
      type: object
      properties:
        status:
          type: integer
          description: A valid http status code
        message:
          type: string
          description: A message explaining the status
        cause:
          type: string
          description: Used to describe the origin of an error if that original error has meaning to the client.  This field should add specificity to 'message'.
        fields:
          type: object
          description: Used to identify specific fields in a JSON body that caused the error.  Typically only used for 4xx type responses.  The key should be the json path to the invalid property and the value should be a list of error messages specific to that property.
          additionalProperties:
            type: array
            items:
              type: string
        context:
          type: string
          description: Used to identify what part of the request caused the error for non-JSON payloads.
      required:
        - status
        - message
    HealthCheck:
      type: object
      properties:
        status:
          type: integer
          description: A valid http status code
        message:
          type: string
          description: A message explaining the status
      required:
        - status
        - message
    GuardMetrics:
      type: object
      properties:
        requestId:
          type: string
          description: The id of the request this metric entry is for (i.e. the specific call to /guards/{guardName}/validate)
        guardName:
          type: string
          description: The name of the Guard
        timestamp:
          type: string
          format: date-time
          description: The start time of the span the metrics were captured within (ISO 8601 format; See https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        runDuration:
          type: number
          description: The total span duration of the guard run in seconds
        status:
          $ref: "#/components/schemas/Status"
        reasks:
          type: number
          description: The number of times the LLM was reasked
        tokens:
          type: number
          description: The number of tokens used
        rawLlmOuput:
          type: string
          description: The unaltered output from the LLM
        validatedOutput:
          type: string
          description: The potentially altered output from validation
      required:
        - requestId
        - guardName
        - timestamp
        - runDuration
        - status
        - reasks
        - tokens
        - rawLlmOuput
        - validatedOutput
    Status:
      type: string
      enum: [
        "pass",
        "fail"
      ]
    GuardRunMetrics:
      allOf:
        - $ref: '#/components/schemas/GuardMetrics'
        - $ref: '#/components/schemas/GuardRunMetricDetails'
    GuardRunMetricDetails:
      type: object
      properties:
        prompt:
          type: string
        instructions:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/GuardRunStep'
      required:
        - prompt
        - instructions
        - steps
    GuardRunStep:
      type: object
      properties:
        stepNumber:
          type: number
        validatorMetrics:
          type: array
          items:
            $ref: '#/components/schemas/ValidatorMetrics'
      required:
        - stepNumber
        - validatorMetrics
    ValidatorMetrics:
      type: object
      properties:
        name:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        durationInMillis:
          type: number
        output:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        tokens:
          type: number
          description: The number of tokens consumed if the validator calls an LLM. Only applies to validators that call LLMs.
      required:
        - name
        - startTime
        - endTime
        - durationInMillis
        - output
        - status
  parameters:
    StartTime:
      name: startTime
      in: query
      description: Used to specify to start of a time range
      required: false
      schema:
        type: string
        format: date-time
    EndTime:
      name: endTime
      in: query
      description: Used to specify to end of a time range
      required: false
      schema:
        type: string
        format: date-time
    PageNumber:
      name: page
      in: query
      description: Used to specify the page number for paginated endpoints
      required: false
      schema:
        type: integer
    GuardName:
      name: guardName
      in: path
      description: Guard name
      required: true
      schema:
        type: string
    RequestId:
      name: requestId
      in: path
      description: Request id aka trace id for a validate-{guard-name} span
      required: true
      schema:
        type: string